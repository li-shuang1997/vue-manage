{"ast":null,"code":"import Mock from 'mockjs'; // get请求从config.url获取参数，post从config.body中获取参数\n\nfunction param2Obj(url) {\n  const search = url.split('?')[1];\n\n  if (!search) {\n    return {};\n  }\n\n  return JSON.parse('{\"' + decodeURIComponent(search).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') + '\"}');\n}\n\nlet List = [];\nconst count = 200;\n\nfor (let i = 0; i < count; i++) {\n  List.push(Mock.mock({\n    id: Mock.Random.guid(),\n    name: Mock.Random.cname(),\n    addr: Mock.mock('@county(true)'),\n    'age|18-60': 1,\n    birth: Mock.Random.date(),\n    sex: Mock.Random.integer(0, 1)\n  }));\n}\n\nexport default {\n  /**\n   * 获取列表\n   * 要带参数 name, page, limt; name可以不填, page,limit有默认值。\n   * @param name, page, limit\n   * @return {{code: number, count: number, data: *[]}}\n   */\n  getUserList: config => {\n    const {\n      name,\n      page = 1,\n      limit = 20\n    } = param2Obj(config.url);\n    console.log('name:' + name, 'page:' + page, '分页大小limit:' + limit);\n    const mockList = List.filter(user => {\n      if (name && user.name.indexOf(name) === -1 && user.addr.indexOf(name) === -1) return false;\n      return true;\n    });\n    const pageList = mockList.filter((item, index) => index < limit * page && index >= limit * (page - 1));\n    return {\n      code: 20000,\n      count: mockList.length,\n      list: pageList\n    };\n  },\n\n  /**\n   * 增加用户\n   * @param name, addr, age, birth, sex\n   * @return {{code: number, data: {message: string}}}\n   */\n  createUser: config => {\n    const {\n      name,\n      addr,\n      age,\n      birth,\n      sex\n    } = JSON.parse(config.body);\n    console.log(JSON.parse(config.body));\n    List.unshift({\n      id: Mock.Random.guid(),\n      name: name,\n      addr: addr,\n      age: age,\n      birth: birth,\n      sex: sex\n    });\n    return {\n      code: 20000,\n      data: {\n        message: '添加成功'\n      }\n    };\n  },\n\n  /**\n   * 删除用户\n   * @param id\n   * @return {*}\n   */\n  deleteUser: config => {\n    const {\n      id\n    } = param2Obj(config.url);\n\n    if (!id) {\n      return {\n        code: -999,\n        message: '参数不正确'\n      };\n    } else {\n      List = List.filter(u => u.id !== id);\n      return {\n        code: 20000,\n        message: '删除成功'\n      };\n    }\n  },\n\n  /**\n   * 批量删除\n   * @param config\n   * @return {{code: number, data: {message: string}}}\n   */\n  batchremove: config => {\n    let {\n      ids\n    } = param2Obj(config.url);\n    ids = ids.split(',');\n    List = List.filter(u => !ids.includes(u.id));\n    return {\n      code: 20000,\n      data: {\n        message: '批量删除成功'\n      }\n    };\n  },\n\n  /**\n   * 修改用户\n   * @param id, name, addr, age, birth, sex\n   * @return {{code: number, data: {message: string}}}\n   */\n  updateUser: config => {\n    const {\n      id,\n      name,\n      addr,\n      age,\n      birth,\n      sex\n    } = JSON.parse(config.body);\n    const sex_num = parseInt(sex);\n    List.some(u => {\n      if (u.id === id) {\n        u.name = name;\n        u.addr = addr;\n        u.age = age;\n        u.birth = birth;\n        u.sex = sex_num;\n        return true;\n      }\n    });\n    return {\n      code: 20000,\n      data: {\n        message: '编辑成功'\n      }\n    };\n  }\n};","map":{"version":3,"sources":["E:/前端学习/myproject/vue-manage/vue-manage/api/mockServeData/user.js"],"names":["Mock","param2Obj","url","search","split","JSON","parse","decodeURIComponent","replace","List","count","i","push","mock","id","Random","guid","name","cname","addr","birth","date","sex","integer","getUserList","config","page","limit","console","log","mockList","filter","user","indexOf","pageList","item","index","code","length","list","createUser","age","body","unshift","data","message","deleteUser","u","batchremove","ids","includes","updateUser","sex_num","parseInt","some"],"mappings":"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","sourcesContent":["import Mock from 'mockjs'\n\n// get请求从config.url获取参数，post从config.body中获取参数\nfunction param2Obj (url) {\n  const search = url.split('?')[1]\n  if (!search) {\n    return {}\n  }\n  return JSON.parse(\n    '{\"' +\n    decodeURIComponent(search)\n      .replace(/\"/g, '\\\\\"')\n      .replace(/&/g, '\",\"')\n      .replace(/=/g, '\":\"') +\n    '\"}'\n  )\n}\n\nlet List = []\nconst count = 200\n\nfor (let i = 0; i < count; i++) {\n  List.push(\n    Mock.mock({\n      id: Mock.Random.guid(),\n      name: Mock.Random.cname(),\n      addr: Mock.mock('@county(true)'),\n      'age|18-60': 1,\n      birth: Mock.Random.date(),\n      sex: Mock.Random.integer(0, 1)\n    })\n  )\n}\n\nexport default {\n  /**\n   * 获取列表\n   * 要带参数 name, page, limt; name可以不填, page,limit有默认值。\n   * @param name, page, limit\n   * @return {{code: number, count: number, data: *[]}}\n   */\n  getUserList: config => {\n    const { name, page = 1, limit = 20 } = param2Obj(config.url)\n    console.log('name:' + name, 'page:' + page, '分页大小limit:' + limit)\n    const mockList = List.filter(user => {\n      if (name && user.name.indexOf(name) === -1 && user.addr.indexOf(name) === -1) return false\n      return true\n    })\n    const pageList = mockList.filter((item, index) => index < limit * page && index >= limit * (page - 1))\n    return {\n      code: 20000,\n      count: mockList.length,\n      list: pageList\n    }\n  },\n  /**\n   * 增加用户\n   * @param name, addr, age, birth, sex\n   * @return {{code: number, data: {message: string}}}\n   */\n  createUser: config => {\n    const { name, addr, age, birth, sex } = JSON.parse(config.body)\n    console.log(JSON.parse(config.body))\n    List.unshift({\n      id: Mock.Random.guid(),\n      name: name,\n      addr: addr,\n      age: age,\n      birth: birth,\n      sex: sex\n    })\n    return {\n      code: 20000,\n      data: {\n        message: '添加成功'\n      }\n    }\n  },\n  /**\n   * 删除用户\n   * @param id\n   * @return {*}\n   */\n  deleteUser: config => {\n    const { id } = param2Obj(config.url)\n    if (!id) {\n      return {\n        code: -999,\n        message: '参数不正确'\n      }\n    } else {\n      List = List.filter(u => u.id !== id)\n      return {\n        code: 20000,\n        message: '删除成功'\n      }\n    }\n  },\n  /**\n   * 批量删除\n   * @param config\n   * @return {{code: number, data: {message: string}}}\n   */\n  batchremove: config => {\n    let { ids } = param2Obj(config.url)\n    ids = ids.split(',')\n    List = List.filter(u => !ids.includes(u.id))\n    return {\n      code: 20000,\n      data: {\n        message: '批量删除成功'\n      }\n    }\n  },\n  /**\n   * 修改用户\n   * @param id, name, addr, age, birth, sex\n   * @return {{code: number, data: {message: string}}}\n   */\n  updateUser: config => {\n    const { id, name, addr, age, birth, sex } = JSON.parse(config.body)\n    const sex_num = parseInt(sex)\n    List.some(u => {\n      if (u.id === id) {\n        u.name = name\n        u.addr = addr\n        u.age = age\n        u.birth = birth\n        u.sex = sex_num\n        return true\n      }\n    })\n    return {\n      code: 20000,\n      data: {\n        message: '编辑成功'\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}